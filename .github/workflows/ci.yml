name: Producer CPP Sample Checks

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master

jobs:
  multistream-sample:
    name: Multistream sample on Ubuntu 22.04
    runs-on: ubuntu-latest
    container: public.ecr.aws/ubuntu/ubuntu:22.04_stable
    timeout-minutes: 30

    env:
      AWS_KVS_LOG_LEVEL: 2
      KVS_DEBUG_DUMP_DATA_FILE_DIR: ${{ github.workspace }}/build/debug_output
      GST_PLUGIN_PATH: ${{ github.workspace }}/build
      KVS_STREAM_NAME_BASE: demo-stream-producer-cpp-ubuntu-22.04-ci-kvs_gstreamer_multistream_sample

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git cmake build-essential pkg-config libssl-dev libcurl4-openssl-dev \
            liblog4cplus-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-bad gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-ugly gstreamer1.0-tools curl mkvtoolnix libgstrtspserver-1.0

      - name: Build GST RTSP Server Test Launch Sample
        run: |
          set -x
          git clone --no-checkout --filter=blob:none --depth=1 -b 1.22 https://gitlab.freedesktop.org/gstreamer/gstreamer.git
          cd gstreamer
          git sparse-checkout init cone
          git sparse-checkout set "subprojects/gst-rtsp-server/examples/test-launch.c"
          git checkout
          cd subprojects/gst-rtsp-server/examples
          gcc -o test-launch test-launch.c `pkg-config --cflags --libs gstreamer-rtsp-server-1.0`
          mv ./test-launch $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          rm -rf gstreamer

      - name: Build samples
        run: |
          mkdir build && cd build
          mkdir -p $KVS_DEBUG_DUMP_DATA_FILE_DIR
          cmake .. -DBUILD_GSTREAMER_PLUGIN=ON -DBUILD_DEPENDENCIES=OFF -DALIGNED_MEMORY_MODEL=ON
          make -j$(nproc)

      - name: Run multistream sample
        working-directory: ./build
        run: |
          set -x
          
          export PIPELINE_8554="videotestsrc is-live=true \
            ! textoverlay text=rtsp://127.0.0.1:8554/test \
            ! video/x-raw,height=480,width=640,framerate=10/1 \
            ! x264enc tune=zerolatency bitrate=512 key-int-max=25 \
            ! h264parse \
            ! rtph264pay name=pay0 pt=96"
          export PIPELINE_8555="videotestsrc is-live=true \
            ! textoverlay text=rtsp://127.0.0.1:8555/test \
            ! video/x-raw,height=480,width=640,framerate=10/1 \
            ! x264enc tune=zerolatency bitrate=512 key-int-max=25 \
            ! h264parse \
            ! rtph264pay name=pay0 pt=96"

          "$GITHUB_WORKSPACE"/test-launch -p 8554 "${PIPELINE_8554}" &
          "$GITHUB_WORKSPACE"/test-launch -p 8555 "${PIPELINE_8555}" &
          
          echo "rtsp://127.0.0.1:8554/test" > rtsp-urls.txt
          echo "rtsp://127.0.0.1:8555/test" >> rtsp-urls.txt
          
          sleep 10
          gst-discoverer-1.0 "rtsp://127.0.0.1:8554/test"
          gst-discoverer-1.0 "rtsp://127.0.0.1:8555/test"
          
          set +e  # Disable exit on error for the timeout command
          timeout --preserve-status --signal=SIGINT --kill-after=15s 30s \
            ./kvs_gstreamer_multistream_sample "$KVS_STREAM_NAME" rtsp-urls.txt
          EXIT_CODE=$?
          set -e  # Re-enable exit on error

          # 130 (128 + 2): Process killed by SIGINT
          # 137: Process killed by SIGKILL (if the --kill-after timeout is reached) 
          echo "Command exited with code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 130 ]; then
            echo "Command did not exit gracefully after interrupt."
            exit 1
          fi

        shell: bash

      - name: Verify MKV dump
        working-directory: ./build/debug_output
        run: |
          shopt -s nullglob  # Ensure globbing works correctly and avoids errors when no files are found
          
          ls -tlrh
          mkvfiles=(*.mkv)
          if [ ${#mkvfiles[@]} -eq 0 ]; then
            echo "No MKV files found in debug_output"
            exit 1
          fi
          
          # Since there are 2 streams, check for the presence of two different prefixed MKV files
          found_0=0
          found_1=0
          
          for file in "${mkvfiles[@]}"; do
            if [[ "$file" == `$KVS_STREAM_NAME`_0* ]]; then
              found_0=1
            elif [[ "$file" ==` $KVS_STREAM_NAME`_1* ]]; then
              found_1=1
            fi
          done
          
          if [ $found_0 -eq 0 ] || [ $found_1 -eq 0 ]; then
            echo "Expected at least one file starting with each prefix:"
            echo "  - `$KVS_STREAM_NAME`_0"
            echo "  - `$KVS_STREAM_NAME`_1"
            exit 1
          fi
          
          for file in "${mkvfiles[@]}"; do
            echo "Verifying $file with mkvinfo (verbose and hexdump):"
            mkvinfo -v -X "$file"
          done
        shell: bash
